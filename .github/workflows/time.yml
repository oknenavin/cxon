name: Time

on: [ push, pull_request, workflow_dispatch ]
  schedule:
    - cron: '0 3 * * 1'

jobs:

  # gcc ########################################################################

  gcc-5:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install gcc-5 g++-5
    - name: Time
      env:
        CXX: g++-5
        CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
      run: make time

  gcc-11:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install gcc-11 g++-11
    - name: Time
      env:
        CXX: g++-11
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / g++11 / default" > .dep/workflows-data/cxon/benchmarks/g++.head.default.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.default.json.node
        echo "# $(date -u --iso-8601=seconds) / g++11 / default" > .dep/workflows-data/cxon/benchmarks/g++.head.default.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.default.json.native
        make clean && make -j build-cbor-node
        echo "# $(date -u --iso-8601=seconds) / g++11" > .dep/workflows-data/cxon/benchmarks/g++.head.cbor
        make -s time-cbor | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.cbor
    - name: Time (fast_float)
      env:
        CXX: g++-11
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/fast_float/include -DCXON_USE_FAST_FLOAT -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / g++11 / fast_float" > .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.node
        echo "# $(date -u --iso-8601=seconds) / g++11 / fast_float" > .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.native
    - name: Store the results
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f g++.head.default.json.node g++.head.default.json.node.data
        cat g++.tail.default.json.node.data >> g++.head.default.json.node && mv -f g++.head.default.json.node g++.tail.default.json.node.data
        cp -f g++.head.default.json.native g++.head.default.json.native.data
        cat g++.tail.default.json.native.data >> g++.head.default.json.native && mv -f g++.head.default.json.native g++.tail.default.json.native.data
        cp -f g++.head.fast_float.json.node g++.head.fast_float.json.node.data
        cat g++.tail.fast_float.json.node.data >> g++.head.fast_float.json.node && mv -f g++.head.fast_float.json.node g++.tail.fast_float.json.node.data
        cp -f g++.head.fast_float.json.native g++.head.fast_float.json.native.data
        cat g++.tail.fast_float.json.native.data >> g++.head.fast_float.json.native && mv -f g++.head.fast_float.json.native g++.tail.fast_float.json.native.data
        cp -f g++.head.cbor g++.head.cbor.data
        cat g++.tail.cbor.data >> g++.head.cbor && mv -f g++.head.cbor g++.tail.cbor.data
        git commit -a -m "$(date -u --iso-8601=seconds) / $(git rev-parse --short "$GITHUB_SHA")" -m "${{ github.event.head_commit.message }}"
        git pull --rebase && git push

  # clang ######################################################################

  #clang-3-5:
  #  runs-on: ubuntu-16.04
  #  steps:
  #  - uses: actions/checkout@v2
  #  - name: Compiler setup
  #    run: |
  #      sudo apt-get update
  #      sudo apt-get install clang-3.5
  #  - name: Time
  #    env:
  #      CXX: clang++-3.5
  #      CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
  #    run: make time

  clang-4:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install clang-4.0
    - name: Time
      env:
        CXX: clang++-4.0
        CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
      run: make time

  clang-12:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install clang-12
    - name: Time
      env:
        CXX: clang++-12
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / clang++12 / default" > .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.node
        echo "# $(date -u --iso-8601=seconds) / clang++12 / default" > .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.native
        make clean && make -j build-cbor-node
        echo "# $(date -u --iso-8601=seconds) / clang++12" > .dep/workflows-data/cxon/benchmarks/clang++.head.cbor
        make -s time-cbor | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.cbor
    - name: Time (fast_float)
      env:
        CXX: clang++-12
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/fast_float/include -DCXON_USE_FAST_FLOAT -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / clang++12 / fast_float" > .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.node
        echo "# $(date -u --iso-8601=seconds) / clang++12 / fast_float" > .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.native
    - name: Store the results
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f clang++.head.default.json.node clang++.head.default.json.node.data
        cat clang++.tail.default.json.node.data >> clang++.head.default.json.node && mv -f clang++.head.default.json.node clang++.tail.default.json.node.data
        cp -f clang++.head.default.json.native clang++.head.default.json.native.data
        cat clang++.tail.default.json.native.data >> clang++.head.default.json.native && mv -f clang++.head.default.json.native clang++.tail.default.json.native.data
        cp -f clang++.head.fast_float.json.node clang++.head.fast_float.json.node.data
        cat clang++.tail.fast_float.json.node.data >> clang++.head.fast_float.json.node && mv -f clang++.head.fast_float.json.node clang++.tail.fast_float.json.node.data
        cp -f clang++.head.fast_float.json.native clang++.head.fast_float.json.native.data
        cat clang++.tail.fast_float.json.native.data >> clang++.head.fast_float.json.native && mv -f clang++.head.fast_float.json.native clang++.tail.fast_float.json.native.data
        cp -f clang++.head.cbor clang++.head.cbor.data
        cat clang++.tail.cbor.data >> clang++.head.cbor && mv -f clang++.head.cbor clang++.tail.cbor.data
        git commit -a -m "$(date -u --iso-8601=seconds) / $(git rev-parse --short "$GITHUB_SHA")" -m "${{ github.event.head_commit.message }}"
        git pull --rebase && git push

  # msvc ######################################################################

  msvc++:
    runs-on: windows-latest
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Configure
      run: cd test ; cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS="/std:c++20 /O2 /D CXON_TIME_ONLY"
    - name: Build
      run: cd test ; cmake --build build --parallel
    - name: Time
      run: |
        pwd ; ls -la

  # xcode ######################################################################
