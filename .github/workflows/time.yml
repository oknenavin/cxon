name: Time

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 6'

jobs:

  # gcc ########################################################################

  gcc-5:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install gcc-5 g++-5
    - name: Time
      env:
        CXX: g++-5
        CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
      run: make time

  gcc-11:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install gcc-11 g++-11
    - name: Time (default)
      env:
        CXX: g++-11
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        COMPILER_VERSION=$($CXX --version | sed -E 's/g++.* (.*)/\1/' | head -n1)
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / g++-$COMPILER_VERSION / node (default)" > .dep/workflows-data/cxon/benchmarks/g++.head.default.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.default.json.node
        echo "# $(date -u --iso-8601=seconds) / g++-$COMPILER_VERSION / native (default)" > .dep/workflows-data/cxon/benchmarks/g++.head.default.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.default.json.native
        make clean && make -j build-cbor-node
        echo "# $(date -u --iso-8601=seconds) / g++-$COMPILER_VERSION" > .dep/workflows-data/cxon/benchmarks/g++.head.cbor
        make -s time-cbor | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.cbor
    - name: Time (fast_float)
      env:
        CXX: g++-11
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/fast_float/include -DCXON_USE_FAST_FLOAT -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        COMPILER_VERSION=$($CXX --version | sed -E 's/g++.* (.*)/\1/' | head -n1)
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / g++-$COMPILER_VERSION / node (fast_float)" > .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.node
        echo "# $(date -u --iso-8601=seconds) / g++-$COMPILER_VERSION / native (fast_float)" > .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/g++.head.fast_float.json.native
    - name: Store the results
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f g++.head.default.json.node g++.head.default.json.node.data
        cat g++.tail.default.json.node.data >> g++.head.default.json.node && mv -f g++.head.default.json.node g++.tail.default.json.node.data
        cp -f g++.head.default.json.native g++.head.default.json.native.data
        cat g++.tail.default.json.native.data >> g++.head.default.json.native && mv -f g++.head.default.json.native g++.tail.default.json.native.data
        cp -f g++.head.fast_float.json.node g++.head.fast_float.json.node.data
        cat g++.tail.fast_float.json.node.data >> g++.head.fast_float.json.node && mv -f g++.head.fast_float.json.node g++.tail.fast_float.json.node.data
        cp -f g++.head.fast_float.json.native g++.head.fast_float.json.native.data
        cat g++.tail.fast_float.json.native.data >> g++.head.fast_float.json.native && mv -f g++.head.fast_float.json.native g++.tail.fast_float.json.native.data
        cp -f g++.head.cbor g++.head.cbor.data
        cat g++.tail.cbor.data >> g++.head.cbor && mv -f g++.head.cbor g++.tail.cbor.data
        git commit -a -m "- g++ / $(date -u --iso-8601=seconds) / $(git rev-parse --short "$GITHUB_SHA")" -m "- ${{ github.event.head_commit.message }}"
        git pull --rebase && git push

  # clang ######################################################################

  #clang-3-5:
  #  runs-on: ubuntu-16.04
  #  steps:
  #  - uses: actions/checkout@v2
  #  - name: Compiler setup
  #    run: |
  #      sudo apt-get update
  #      sudo apt-get install clang-3.5
  #  - name: Time
  #    env:
  #      CXX: clang++-3.5
  #      CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
  #    run: make time

  clang-4:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install clang-4.0
    - name: Time
      env:
        CXX: clang++-4.0
        CXXFLAGS: -std=c++11 -DCXON_TIME_ONLY
      run: make time

  clang-12:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Compiler setup
      run: |
        sudo apt-get update
        sudo apt-get install clang-12
    - name: Time (default)
      env:
        CXX: clang++-12
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        COMPILER_VERSION=$($CXX --version | sed -E 's/.*clang version (.*)ubuntu.*/\1/' | head -n1)
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / clang++-$COMPILER_VERSION / node (default)" > .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.node
        echo "# $(date -u --iso-8601=seconds) / clang++-$COMPILER_VERSION / native (default)" > .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.default.json.native
        make clean && make -j build-cbor-node
        echo "# $(date -u --iso-8601=seconds) / clang++-$COMPILER_VERSION" > .dep/workflows-data/cxon/benchmarks/clang++.head.cbor
        make -s time-cbor | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.cbor
    - name: Time (fast_float)
      env:
        CXX: clang++-12
        CXXFLAGS: -std=c++20 -DCXON_TIME_ONLY -I ../.dep/fast_float/include -DCXON_USE_FAST_FLOAT -I ../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN
      run: |
        COMPILER_VERSION=$($CXX --version | sed -E 's/.*clang version (.*)ubuntu.*/\1/' | head -n1)
        make clean && make -j build-json-node
        echo "# $(date -u --iso-8601=seconds) / clang++-$COMPILER_VERSION / node (fast_float)" > .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.node
        make -s time-json-node | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.node
        echo "# $(date -u --iso-8601=seconds) / clang++-$COMPILER_VERSION / native (fast_float)" > .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.native
        make -s time-json-native | tee -a .dep/workflows-data/cxon/benchmarks/clang++.head.fast_float.json.native
    - name: Store the results
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f clang++.head.default.json.node clang++.head.default.json.node.data
        cat clang++.tail.default.json.node.data >> clang++.head.default.json.node && mv -f clang++.head.default.json.node clang++.tail.default.json.node.data
        cp -f clang++.head.default.json.native clang++.head.default.json.native.data
        cat clang++.tail.default.json.native.data >> clang++.head.default.json.native && mv -f clang++.head.default.json.native clang++.tail.default.json.native.data
        cp -f clang++.head.fast_float.json.node clang++.head.fast_float.json.node.data
        cat clang++.tail.fast_float.json.node.data >> clang++.head.fast_float.json.node && mv -f clang++.head.fast_float.json.node clang++.tail.fast_float.json.node.data
        cp -f clang++.head.fast_float.json.native clang++.head.fast_float.json.native.data
        cat clang++.tail.fast_float.json.native.data >> clang++.head.fast_float.json.native && mv -f clang++.head.fast_float.json.native clang++.tail.fast_float.json.native.data
        cp -f clang++.head.cbor clang++.head.cbor.data
        cat clang++.tail.cbor.data >> clang++.head.cbor && mv -f clang++.head.cbor clang++.tail.cbor.data
        git commit -a -m "- clang++ / $(date -u --iso-8601=seconds) / $(git rev-parse --short "$GITHUB_SHA")" -m "- ${{ github.event.head_commit.message }}"
        git pull --rebase && git push

  # msvc ######################################################################

  msvc:
    runs-on: windows-latest
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Time (default)
      shell: bash
      env:
        CXXFLAGS: -EHsc -Oi -Ot -GR- -GS- -GL -D CXON_TIME_ONLY -I ../../.dep/boost/include -D CXON_TIME_BOOST_JSON -I ../../.dep/rapidjson/include -D CXON_TIME_RAPIDJSON -I ../../.dep/nlohmann/single_include -D CXON_TIME_NLOHMANN
      run: |
        cd test
        #cmake --build .bld --target clean
        cmake -S . -B .bld -D CMAKE_CXX_STANDARD=20 -D CMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="-LTCG"
        cmake --build .bld --config Release --target cxon.json.node --parallel
        COMPILER_VERSION=$(grep -Erho 'CMAKE_CXX_COMPILER_VERSION ".*"' .bld | sed -E 's/.*"(.*)"/\1/' | head -n1)
        cd .out
        echo "# $(date -u --iso-8601=seconds) / msvc++-$COMPILER_VERSION / node (default)" > ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.default.json.node
        ./cxon.json.node time-node '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.default.json.node
        echo "# $(date -u --iso-8601=seconds) / msvc++-$COMPILER_VERSION / native (default)" > ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.default.json.native
        ./cxon.json.node time-native '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.default.json.native
    - name: Time (fast_float)
      shell: bash
      env:
        CXXFLAGS: -EHsc -Oi -Ot -GR- -GS- -GL -D CXON_TIME_ONLY -I ../../.dep/fast_float/include -D CXON_USE_FAST_FLOAT -I ../../.dep/boost/include -D CXON_TIME_BOOST_JSON -I ../../.dep/rapidjson/include -D CXON_TIME_RAPIDJSON -I ../../.dep/nlohmann/single_include -D CXON_TIME_NLOHMANN
      run: |
        cd test
        cmake --build .bld --target clean
        cmake -S . -B .bld -D CMAKE_CXX_STANDARD=20 -D CMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="-LTCG"
        cmake --build .bld --config Release --target cxon.json.node --parallel
        COMPILER_VERSION=$(grep -Erho 'CMAKE_CXX_COMPILER_VERSION ".*"' .bld | sed -E 's/.*"(.*)"/\1/' | head -n1)
        cd .out
        echo "# $(date -u --iso-8601=seconds) / msvc++-$COMPILER_VERSION / node (fast_float)" > ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.fast_float.json.node
        ./cxon.json.node time-node '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.fast_float.json.node
        echo "# $(date -u --iso-8601=seconds) / msvc++-$COMPILER_VERSION / native (fast_float)" > ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.fast_float.json.native
        ./cxon.json.node time-native '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/msvc++.head.fast_float.json.native
    - name: Store the results
      shell: bash
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f msvc++.head.default.json.node msvc++.head.default.json.node.data
        cat msvc++.tail.default.json.node.data >> msvc++.head.default.json.node && mv -f msvc++.head.default.json.node msvc++.tail.default.json.node.data
        cp -f msvc++.head.default.json.native msvc++.head.default.json.native.data
        cat msvc++.tail.default.json.native.data >> msvc++.head.default.json.native && mv -f msvc++.head.default.json.native msvc++.tail.default.json.native.data
        cp -f msvc++.head.fast_float.json.node msvc++.head.fast_float.json.node.data
        cat msvc++.tail.fast_float.json.node.data >> msvc++.head.fast_float.json.node && mv -f msvc++.head.fast_float.json.node msvc++.tail.fast_float.json.node.data
        cp -f msvc++.head.fast_float.json.native msvc++.head.fast_float.json.native.data
        cat msvc++.tail.fast_float.json.native.data >> msvc++.head.fast_float.json.native && mv -f msvc++.head.fast_float.json.native msvc++.tail.fast_float.json.native.data
        git commit -a -m "- msvc / $(date -u --iso-8601=seconds) / $(git rev-parse --short "$GITHUB_SHA")" -m "- ${{ github.event.head_commit.message }}"
        git pull --rebase && git push

  # xcode ######################################################################

  xcode:
    runs-on: macos-latest
    steps:
    - name: Checkout cxon
      uses: actions/checkout@v2
    - name: Checkout workflows-data
      uses: actions/checkout@v2
      with:
        repository: oknenavin/workflows-data
        token: ${{ secrets.WORKFLOWS_DATA_TOKEN }}
        ref: master
        path: .dep/workflows-data
    - name: Checkout Boost/JSON
      uses: actions/checkout@v2
      with:
        repository: boostorg/json
        ref: master
        path: .dep/boost
    - name: Checkout RapidJSON
      uses: actions/checkout@v2
      with:
        repository: tencent/rapidjson
        ref: master
        path: .dep/rapidjson
    - name: Checkout nlohmann/json
      uses: actions/checkout@v2
      with:
        repository: nlohmann/json
        ref: master
        path: .dep/nlohmann
    - name: Checkout fastfloat/fast_float
      uses: actions/checkout@v2
      with:
        repository: fastfloat/fast_float
        ref: main
        path: .dep/fast_float
    - name: Time (default)
      run: |
        cd test
        #cmake --build .bld --target clean
        cmake -S . -B .bld -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_STANDARD=20 -D CMAKE_CXX_FLAGS="-DCXON_TIME_ONLY -I ../../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN"
        cmake --build .bld --target cxon.json.node --parallel
        COMPILER_VERSION=$(grep -Erho 'CMAKE_CXX_COMPILER_VERSION ".*"' .bld | sed -E 's/.*"(.*)"/\1/' | head -n1)
        cd .out
        echo "# $(date -u +'%Y-%m-%dT%H:%M:%S+00:00') / clang++-$COMPILER_VERSION / node (default)" > ../../.dep/workflows-data/cxon/benchmarks/xcode.head.default.json.node
        ./cxon.json.node time-node '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/xcode.head.default.json.node
        echo "# $(date -u +'%Y-%m-%dT%H:%M:%S+00:00') / clang++-$COMPILER_VERSION / native (default)" > ../../.dep/workflows-data/cxon/benchmarks/xcode.head.default.json.native
        ./cxon.json.node time-native '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/xcode.head.default.json.native
    - name: Time (fast_float)
      run: |
        cd test
        cmake --build .bld --target clean
        cmake -S . -B .bld -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_STANDARD=20 -D CMAKE_CXX_FLAGS="-DCXON_TIME_ONLY -I ../../.dep/fast_float/include -DCXON_USE_FAST_FLOAT -I ../../.dep/boost/include -DCXON_TIME_BOOST_JSON -I ../../.dep/rapidjson/include -DCXON_TIME_RAPIDJSON -I ../../.dep/nlohmann/single_include -DCXON_TIME_NLOHMANN"
        cmake --build .bld --target cxon.json.node --parallel
        COMPILER_VERSION=$(grep -Erho 'CMAKE_CXX_COMPILER_VERSION ".*"' .bld | sed -E 's/.*"(.*)"/\1/' | head -n1)
        cd .out
        echo "# $(date -u +'%Y-%m-%dT%H:%M:%S+00:00') / clang++-$COMPILER_VERSION / node (fast_float)" > ../../.dep/workflows-data/cxon/benchmarks/xcode.head.fast_float.json.node
        ./cxon.json.node time-node '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/xcode.head.fast_float.json.node
        echo "# $(date -u +'%Y-%m-%dT%H:%M:%S+00:00') / clang++-$COMPILER_VERSION / native (fast_float)" > ../../.dep/workflows-data/cxon/benchmarks/xcode.head.fast_float.json.native
        ./cxon.json.node time-native '@../data/json/time.in' | tee -a ../../.dep/workflows-data/cxon/benchmarks/xcode.head.fast_float.json.native
    - name: Store the results
      run: |
        cd .dep/workflows-data/cxon/benchmarks
        git config user.name "oknenavin" && git config user.email ${{ secrets.CXON_MAIL }}
        cp -f xcode.head.default.json.node xcode.head.default.json.node.data
        cat xcode.tail.default.json.node.data >> xcode.head.default.json.node && mv -f xcode.head.default.json.node xcode.tail.default.json.node.data
        cp -f xcode.head.default.json.native xcode.head.default.json.native.data
        cat xcode.tail.default.json.native.data >> xcode.head.default.json.native && mv -f xcode.head.default.json.native xcode.tail.default.json.native.data
        cp -f xcode.head.fast_float.json.node xcode.head.fast_float.json.node.data
        cat xcode.tail.fast_float.json.node.data >> xcode.head.fast_float.json.node && mv -f xcode.head.fast_float.json.node xcode.tail.fast_float.json.node.data
        cp -f xcode.head.fast_float.json.native xcode.head.fast_float.json.native.data
        cat xcode.tail.fast_float.json.native.data >> xcode.head.fast_float.json.native && mv -f xcode.head.fast_float.json.native xcode.tail.fast_float.json.native.data
        git commit -a -m "- xcode / $(date -u +'%Y-%m-%dT%H:%M:%S+00:00') / $(git rev-parse --short "$GITHUB_SHA")" -m "- ${{ github.event.head_commit.message }}"
        git pull --rebase && git push
