language: bash

matrix:
  include:

    # gcc

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-5
      env: CXX=g++-5

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-6
      env: CXX=g++-6

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-7
      env: CXX=g++-7

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-8
      env: CXX=g++-8

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-9
      env: CXX=g++-9

    - os: linux
      dist: bionic
      language: cpp
      compiler: gcc-10
      addons:
        apt:
            sources:
              - sourceline: 'ppa:ubuntu-toolchain-r/test'
            packages: g++-10
      env: CXX=g++-10

    - os: linux
      dist: bionic
      language: cpp
      compiler: gcc-10
      addons:
        apt:
          sources:
              - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages: g++-10
      env: CXX=g++-10 CXXFLAGS=-std=c++17

    # clang

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: ['g++-5', 'clang-3.5']
      env: CXX=clang++-3.5

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: ['g++-6', 'clang-4.0']
      env: CXX=clang++-4.0

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: ['g++-6', 'clang-5.0']
      env: CXX=clang++-5.0

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: ['g++-6', 'clang-6.0']
      env: CXX=clang++-6.0

    - os: linux
      addons:
        apt:
          sources:  ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-7']
          packages: ['g++-7', 'clang-7']
      env: CXX=clang++-7

    - os: linux
      addons:
        apt:
          sources:  ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-8']
          packages: ['g++-8', 'clang-8']
      env: CXX=clang++-8

    - os: linux
      dist: bionic
      language: cpp
      compiler: clang-9
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-9
      env: CXX=clang++-9

    - os: linux
      dist: bionic
      language: cpp
      compiler: clang-10
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-10
      env: CXX=clang++-10

    - os: linux
      dist: bionic
      language: cpp
      compiler: clang-10
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: clang-10
      env: CXX=clang++-10 CXXFLAGS=-std=c++17

    # coverage

    - os: linux
      addons:
        apt:
          sources:  ubuntu-toolchain-r-test
          packages: g++-8
      env: CXX=g++-8 CXXFLAGS=--coverage
      after_success:
        - wget http://downloads.sourceforge.net/ltp/lcov-1.14.tar.gz
        - tar xvfz lcov-1.14.tar.gz
        - make -C lcov-1.14
        - lcov-1.14/bin/lcov --gcov-tool gcov-8 -c -d . -o cov.info
        - lcov-1.14/bin/lcov -e cov.info '*/cxon/*.hxx' -o cxon.info 
        - lcov-1.14/bin/lcov -l cxon.info
        - bash <(curl -s https://codecov.io/bash) -f cxon.info || echo "upload failed"

    # os x

    - os: osx
      osx_image: xcode10.3
      script:
        - cd test && mkdir .bld && cd .bld
        - cmake ..
        - cmake --build . --config Release
        - ctest -V -C Release

    # windows

    - os: windows
      script:
        - export PATH=$CMAKE_PATH:$PATH
        - cd test && mkdir .bld && cd .bld
        - cmake ..
        - cmake --build . --config Release
        - ctest -V -C Release
      env: CMAKE_PATH="/c/Program Files/CMake/bin"

script:
  - make check
